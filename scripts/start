#!/usr/bin/env node

"use strict";

const app = require("../src/app");
const http = require("http");
const commands = require("../src/utils/constants").COMMANDS;

commands.forEach(({ name, emoji }) => console[name] = (...args) => console.log(emoji + " " + args.join(", ")));

const db = require("../src/utils/dbHelper");

const port = normalizePort(process.env.PORT || 3003);
app.set("port", port);

const server = http.createServer(app);

server.listen(port);

server.on("error", onError);
server.on("listening", onListening);

process.on("SIGINT", onShutdown);

function normalizePort (val) {
	let port = parseInt(val, 10);

	if(isNaN(port)) return val;
	if(port >= 0) return port;
	
	return false;
}

function onShutdown () {	
	console.log("\x1b[32m");
	console.info('Got SIGINT. Graceful shutdown start', new Date().toISOString())
	server.close(async (err) => {
	  if (err) {
	    console.poo(err)
	    process.exit(1)
	  } else {
	    console.tick("Server health restored");
	    await db.closeConnection();
	    console.tick("MongoDB connection closed");
	    console.bye("Sayonara!");
	    console.log("\x1b[0m");
	    process.exit(0);
	  }
	});
}

function onError (error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string"
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening () {
  let addr = server.address();
  let bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  console.listen("Listening on " + bind);
}

